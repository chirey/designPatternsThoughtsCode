\Pattern\src\com\creational\factory\external\ExternalClass.java(6): //Step 1 - This is the external System
\Pattern\src\com\creational\factory\external\ExternalClass.java(19): //Step 8 - receive the correct product
\Pattern\src\com\creational\factory\external\ExternalClass.java(23): //Step 8 - using the product object
\Pattern\src\com\creational\factory\external\Test.java(5): //Step 10 - this is just to test the pattern, we could have also done this in the ExternalClass.
\Pattern\src\com\creational\factory\pattern\FactoryOrCreatorClass.java(5): //Step4 - The factory class is created
\Pattern\src\com\creational\factory\pattern\FactoryOrCreatorClass.java(11): //Step 4a - the obtain method which returns object of type ProductInterface
\Pattern\src\com\creational\factory\pattern\FactoryOrCreatorClass.java(12): //Step 5a - decide on the type information which identifies the situation and
\Pattern\src\com\creational\factory\pattern\FactoryOrCreatorClass.java(16): //Step 6 - instantiate the right object
\Pattern\src\com\creational\factory\pattern\FactoryOrCreatorClass.java(17): //Step 7d - receiving the product as product interfaces.
\Pattern\src\com\creational\factory\pattern\FactoryOrCreatorClass.java(23): //Step 7f - return the product object
\Pattern\src\com\creational\factory\pattern\products\A1Class.java(5): //Step 2 - identify the product clases, extract the interface 
\Pattern\src\com\creational\factory\pattern\products\A1Class.java(6): //Step 3 - make the class implement the interface
